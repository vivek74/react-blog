{"ast":null,"code":"import _objectSpread from \"/home/vivek/Documents/Web projets/react/auth/server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actions from '../actions/authTypes';\nconst initialState = {\n  error: {},\n  data: {},\n  loading: false,\n  errMsg: false,\n  successMsg: false\n};\nexport const registerData = (state = initialState, action) => {\n  let newState = JSON.parse(JSON.stringify(state));\n\n  switch (action.type) {\n    case actions.REGISTER_USER_FULFILLED:\n      {\n        let status = action.payload.status;\n\n        if (status === 200) {\n          newState = _objectSpread({}, state, {\n            error: action.payload.data,\n            loading: false,\n            errMsg: true\n          });\n        } else if (status === 201) {\n          newState = _objectSpread({}, state, {\n            data: action.payload.data,\n            loading: false,\n            successMsg: true\n          });\n        }\n\n        return newState;\n      }\n\n    case actions.REGISTER_USER_PENDING:\n      {\n        newState = _objectSpread({}, state, {\n          loading: true\n        });\n        return newState;\n      }\n\n    case actions.MSG_STATE_ERROR:\n      {\n        newState = _objectSpread({}, state, {\n          errMsg: false\n        });\n        return newState;\n      }\n\n    case actions.MSG_STATE_SUCCESS:\n      {\n        newState = _objectSpread({}, state, {\n          successMsg: false\n        });\n        return newState;\n      }\n\n    default:\n      return newState;\n  }\n};","map":{"version":3,"sources":["/home/vivek/Documents/Web projets/react/auth/server/client/src/store/reducers/register.js"],"names":["actions","initialState","error","data","loading","errMsg","successMsg","registerData","state","action","newState","JSON","parse","stringify","type","REGISTER_USER_FULFILLED","status","payload","REGISTER_USER_PENDING","MSG_STATE_ERROR","MSG_STATE_SUCCESS"],"mappings":";AAAA,OAAO,KAAKA,OAAZ,MAAyB,sBAAzB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,IAAI,EAAG,EAFU;AAGjBC,EAAAA,OAAO,EAAE,KAHQ;AAIjBC,EAAAA,MAAM,EAAE,KAJS;AAKjBC,EAAAA,UAAU,EAAE;AALK,CAArB;AAQA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAC1D,MAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,KAAf,CAAX,CAAf;;AACA,UAAQC,MAAM,CAACK,IAAf;AACI,SAAKd,OAAO,CAACe,uBAAb;AAAsC;AAClC,YAAIC,MAAM,GAAGP,MAAM,CAACQ,OAAP,CAAeD,MAA5B;;AACA,YAAGA,MAAM,KAAK,GAAd,EAAkB;AACdN,UAAAA,QAAQ,qBACDF,KADC;AAEJN,YAAAA,KAAK,EAAEO,MAAM,CAACQ,OAAP,CAAed,IAFlB;AAGJC,YAAAA,OAAO,EAAC,KAHJ;AAIJC,YAAAA,MAAM,EAAC;AAJH,YAAR;AAMH,SAPD,MAOO,IAAGW,MAAM,KAAK,GAAd,EAAmB;AACtBN,UAAAA,QAAQ,qBACDF,KADC;AAEJL,YAAAA,IAAI,EAAEM,MAAM,CAACQ,OAAP,CAAed,IAFjB;AAGJC,YAAAA,OAAO,EAAE,KAHL;AAIJE,YAAAA,UAAU,EAAE;AAJR,YAAR;AAMH;;AACD,eAAOI,QAAP;AACH;;AACD,SAAKV,OAAO,CAACkB,qBAAb;AAAoC;AAChCR,QAAAA,QAAQ,qBACDF,KADC;AAEJJ,UAAAA,OAAO,EAAE;AAFL,UAAR;AAIA,eAAOM,QAAP;AACH;;AACD,SAAKV,OAAO,CAACmB,eAAb;AAA8B;AAC1BT,QAAAA,QAAQ,qBACDF,KADC;AAEJH,UAAAA,MAAM,EAAE;AAFJ,UAAR;AAIA,eAAOK,QAAP;AACH;;AACD,SAAKV,OAAO,CAACoB,iBAAb;AAAgC;AAC5BV,QAAAA,QAAQ,qBACDF,KADC;AAEJF,UAAAA,UAAU,EAAE;AAFR,UAAR;AAIA,eAAOI,QAAP;AACH;;AACH;AACE,aAAOA,QAAP;AA1CJ;AA4CH,CA9CM","sourcesContent":["import * as actions from '../actions/authTypes';\n\nconst initialState = {\n    error: {},\n    data : {},\n    loading: false,\n    errMsg: false,\n    successMsg: false\n};\n\nexport const registerData = (state = initialState, action) => {\n    let newState = JSON.parse(JSON.stringify(state));\n    switch (action.type) {\n        case actions.REGISTER_USER_FULFILLED: {\n            let status = action.payload.status;\n            if(status === 200){\n                newState = {\n                    ...state,\n                    error: action.payload.data,\n                    loading:false,\n                    errMsg:true\n                }\n            } else if(status === 201) {\n                newState = {\n                    ...state,\n                    data: action.payload.data,\n                    loading: false,\n                    successMsg: true \n                }\n            }\n            return newState;\n        }\n        case actions.REGISTER_USER_PENDING: {\n            newState = {\n                ...state,\n                loading: true\n            }\n            return newState;\n        }\n        case actions.MSG_STATE_ERROR: {\n            newState = {\n                ...state,\n                errMsg: false\n            }\n            return newState;\n        }\n        case actions.MSG_STATE_SUCCESS: {\n            newState = {\n                ...state,\n                successMsg: false\n            }\n            return newState;\n        }\n      default:\n        return newState;\n    }\n};"]},"metadata":{},"sourceType":"module"}